#!/bin/ash
#
# rcS: the init script
#
# Maintainer: Daniil Baturin <daniil at baturin dot org>
#
# Copyright (C) 2013, 2017 Daniil Baturin and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

# Wait for the kernel to initialize all the hardware
# Also prevents kernel messages from interfering with ours
# Value is chosen rather arbitrary
sleep 10
echo
echo "Loading EMRK 0.9d"

echo "Mounting filesystems"
mount -a

echo "Bringing up eth0"
ip link set dev eth0 up

########## System integrity checks ##########

BOOT_MNT_DIR=/mnt/boot
ROOT_MNT_DIR=/mnt/root

KERNEL_FILE=vmlinux.64
KERNEL_MD5_FILE=vmlinux.64.md5

SQUASH_FILE=squashfs.img
SQUASH_MD5_FILE=squashfs.img.md5

BOOT_OK=0
BOOT_MOUNT_OK=0
KERNEL_EXISTS=0
KERNEL_MD5_EXISTS=0
KERNEL_CORRECT=0

ROOT_OK=0
ROOT_MOUNT_OK=0
SQUASH_EXISTS=0
SQUASH_MD5_EXISTS=0
SQUASH_CORRECT=0

W_DIR_OK=0

# Kernel partition checks
echo
echo "Checking boot partition"
/sbin/parted --list --machine /dev/sda | grep -E "^1:"|grep fat > /dev/null
if [ $? == 0 ]; then
    echo "Boot partition looks intact"
    BOOT_OK=1
else
    echo "Boot partition is missing or has wrong filesystem type!"
fi

if [ $BOOT_OK == 1 ]; then
    echo "Attempting to mount boot partition"
    mount -t vfat /dev/sda1 $BOOT_MNT_DIR
    if [ $? == 0 ]; then
        BOOT_MOUNT_OK=1
        echo "Boot partition successfully mounted"
    else
        echo "Could not mount boot partition!"
    fi
fi

if [ $BOOT_MOUNT_OK == 1 ]; then
    echo "Looking for kernel file"
    if [ -f $BOOT_MNT_DIR/vmlinux.64 ]; then
        echo "Found a kernel"
        KERNEL_EXISTS=1
    else
        echo "Kernel file not found!"
    fi

    echo "Checking kernel MD5 sum file"
    if [ -f $BOOT_MNT_DIR/$KERNEL_MD5_FILE ]; then
        echo "Found kernel MD5 sum file"
        KERNEL_MD5_EXISTS=1
    else
        echo "Kernel MD5 sum file not found, impossible to check kernel integrity"
    fi

    if [ $KERNEL_EXISTS == 1 ]; then
        if [ $KERNEL_MD5_EXISTS == 1 ]; then
            echo "Checking kernel MD5 sum"
            if [ `md5sum $BOOT_MNT_DIR/$KERNEL_FILE |awk -F ' ' '{print $1}'` == `cat $BOOT_MNT_DIR/$KERNEL_MD5_FILE` ]; then
                echo "Kernel MD5 sum is correct"
            else
                echo "Kernel MD5 sum is not correct! Your kernel may be corrupted."
            fi
        fi
    fi
fi

# Root partition checks
echo
echo "Checking root partition"
/sbin/parted --list --machine /dev/sda | grep -E "^2:"|grep ext3 > /dev/null
if [ $? == 0 ]; then
    echo "Root partition looks intact"
    ROOT_OK=1
else
    echo "Root partition is missing or has wrong filesystem type!"
fi

if [ $ROOT_OK == 1 ]; then
    echo "Attempting to mount root partition"
    mount -t ext3 /dev/sda2 $ROOT_MNT_DIR
    if [ $? == 0 ]; then
        ROOT_MOUNT_OK=1
        echo "Root partition successfully mounted"
    else
        echo "Could not mount root partition!"
    fi
fi

if [ $ROOT_MOUNT_OK == 1 ]; then
    echo "Looking for system image file"
    if [ -f $ROOT_MNT_DIR/$SQUASH_FILE ]; then
        echo "Found a system image file"
        SQUASH_EXISTS=1
    else
        echo "System image file not found!"
    fi

    echo "Checking system image MD5 sum file"
    if [ -f $ROOT_MNT_DIR/$SQUASH_MD5_FILE ]; then
        echo "Found system image MD5 sum file"
        SQUASH_MD5_EXISTS=1
    else
        echo "System image MD5 sum file not found, impossible to check image integrity"
    fi

    if [ $SQUASH_EXISTS == 1 ]; then
        if [ $SQUASH_MD5_EXISTS == 1 ]; then
            echo "Checking system image MD5 sum"
            if [ `/bin/md5sum $ROOT_MNT_DIR/$SQUASH_FILE |awk -F ' ' '{print $1}'` == `cat $ROOT_MNT_DIR/$SQUASH_MD5_FILE` ]; then
                echo "System image MD5 sum is correct"
            else
                echo "System image MD5 sum is not correct! Your image may be corrupted."
            fi
        fi
    fi
fi

echo
echo "**********************************************"
echo "Welcome to EdgeMax Rescue Kit!"
echo
echo "This tool is distributed under the terms of"
echo "GNU General Public License and other licenses"
echo
echo "WARNING: This tool is not developed, officially"
echo "supported or endorsed by Ubiquiti Networks!"
echo
echo "Using it may lead to destroying your router"
echo "configuration or operating system"
echo
echo "Ubiquiti Networks support will not help you"
echo "with using it or fixing consequences of"
echo "using it."
echo
echo "This tool itself is distributed without any"
echo "warranty and authors are not liable for"
echo "any damage it may cause"
echo
echo "By using this tool you agree you are doing"
echo "it at your own risk and understand what"
echo "you are doing"
echo
echo "*********************************************"
echo
echo "Enter 'Yes' to proceed, 'No' to reboot"
/bin/yesno

if [ $? == 1 ]; then
    reboot
fi

# Configure network
DHCP_OK=0
NET_OK=0

echo
echo "Do you want to configure network via DHCP?"
yesno
if [ $? == 0 ]; then
    /sbin/udhcpc
    if [ $? == 0 ]; then
        DHCP_OK=1
        NET_OK=1
    else
        echo "DHCP configuration attemp failed!"
    fi
fi

if [ $DHCP_OK != 1 ]; then
    echo
    echo "Do you want to configure network statically?"
    yesno
    if [ $? == 0 ]; then
        IP=""
        GW=""
        DNS=""

        # Set address
        while true; do
            read -p "Enter IPv4 address in CIDR format (e.g. 192.0.2.10/24): " IP
            /sbin/ip address add $IP dev eth0
            if [ $? == 0 ]; then
                break
            else
                echo "Invalid address, try again!"
            fi
        done

       # Set default gateway
        while true; do
            read -p "Enter IPv4 gateway address: " GW
            /sbin/ip route add default via $GW
            if [ $? == 0 ]; then
                break
            else
                echo "Invalid address, try again!"
            fi
        done

       # Set DNS server
        while true; do
            read -p "Enter DNS server address: " DNS
            # XXX: overly permissive regex to protect just against
            #      obvious typos
            echo $DNS | grep -E "[0-9.]+" > /dev/null
            if [ $? == 0 ]; then
                echo "nameserver $DNS" > /etc/resolv.conf
                break
            else
                echo "Invalid address, try again!"
            fi
        done
    fi

    NET_OK=1
fi

echo
echo "EMRK provides some scripts for automated"
echo "recovery procedures:"
echo
echo "emrk-factory-reset -- reset config to factory default"
echo "emrk-remove-user-data -- remove all the user data including"
echo "    config and everything"
echo "emrk-reinstall -- reinstall EdgeOS from scratch"
echo "    (wipes any user data too)"
#echo "emrk-backup-config -- backup config directory"
#echo "    remote host"
#echo "emrk-config-restore -- restore config directory"
#echo "    contents from a downloaded archive"
echo
echo "Enter 'reboot' to reboot your router"

PS1="EMRK>" /bin/ash
